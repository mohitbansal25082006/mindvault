// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// NextAuth.js Required Models
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  password      String?
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  accounts      Account[]
  sessions      Session[]
  documents    Document[]
  chats        Chat[]
  forumPosts   ForumPost[]
  forumComments ForumComment[]
  forumLikes   ForumLike[]
  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime
  @@unique([identifier, token])
  @@map("verificationtokens")
}

// Application Models
model Document {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  excerpt   String?  @db.Text
  tags      String[]
  isPublic  Boolean  @default(false)
  userId    String   @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  embeddings Embedding[]
  @@map("documents")
}

model Embedding {
  id         String    @id @default(cuid())
  documentId String    @map("document_id")
  content    String    @db.Text
  embedding  Float[]
  createdAt  DateTime  @default(now()) @map("created_at")
  document Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  @@map("embeddings")
}

// Chat Models
model Chat {
  id        String   @id @default(cuid())
  title     String
  userId    String   @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages  Message[]
  @@map("chats")
}

model Message {
  id        String   @id @default(cuid())
  content   String   @db.Text
  role      String   // "user" or "assistant"
  chatId    String   @map("chat_id")
  createdAt DateTime @default(now()) @map("created_at")
  chat Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)
  @@map("messages")
}

// Forum Models
model ForumCategory {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  icon        String?
  color       String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  posts       ForumPost[]
  @@map("forum_categories")
}

model ForumPost {
  id          String   @id @default(cuid())
  title       String
  content     String   @db.Text
  views       Int      @default(0)
  isPinned    Boolean  @default(false)
  isLocked    Boolean  @default(false)
  categoryId  String   @map("category_id")
  userId      String   @map("user_id")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  category    ForumCategory   @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  comments    ForumComment[]
  likes       ForumLike[]
  @@map("forum_posts")
}

model ForumComment {
  id        String   @id @default(cuid())
  content   String   @db.Text
  postId    String   @map("post_id")
  userId    String   @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      ForumPost  @relation(fields: [postId], references: [id], onDelete: Cascade)
  likes     ForumLike[]
  @@map("forum_comments")
}

model ForumLike {
  id         String   @id @default(cuid())
  userId     String   @map("user_id")
  postId     String?  @map("post_id")
  commentId  String?  @map("comment_id")
  createdAt  DateTime @default(now()) @map("created_at")
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  post       ForumPost?  @relation(fields: [postId], references: [id], onDelete: Cascade)
  comment    ForumComment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  @@unique([userId, postId])
  @@unique([userId, commentId])
  @@map("forum_likes")
}